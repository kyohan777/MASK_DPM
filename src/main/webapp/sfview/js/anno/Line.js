import Shape from"/sfview/js/anno/Shape.js";import LineCap from"/sfview/js/anno/LineCap.js";import Handler from"/sfview/js/anno/Handler.js";export default class Line extends Shape{bx;by;ex;ey;lineDash;lineCapHead;lineCapTail;constructor(bx,by,ex,ey,lineWidth=1,strokeStyle="#ff0000",dash="solid"){super(strokeStyle,(function(ctx){if(this.lineDash){ctx.setLineDash(Line.getDashVal(this.lineDash))}ctx.moveTo(this.bx,this.by);ctx.lineTo(this.ex,this.ey);if(this.lineCapHead||this.lineCapTail){ctx.stroke();ctx.closePath();ctx.beginPath();ctx.setLineDash([]);ctx.lineWidth=1;if(this.lineCapHead){this.lineCapHead.draw(ctx)}if(this.lineCapTail){this.lineCapTail.draw(ctx)}}}));[this.bx,this.by,this.ex,this.ey]=[bx,by,ex,ey];this.lineWidth=lineWidth;this.lineDash=dash}setLineCapHead(size=14,type="triangle"){this.lineCapHead=new LineCap(this,"head",size,type)}setLineCapTail(size=14,type="none"){this.lineCapTail=new LineCap(this,"tail",size,type)}moveStep(sx,sy){this.bx+=sx;this.by+=sy;this.ex+=sx;this.ey+=sy}*getPoints(){yield[this.bx,this.by];yield[this.ex,this.ey]}contains(x,y){return this.distance(x,y)<Handler.WIDTH/2}distance(x,y){const A=x-this.bx;const B=y-this.by;const C=this.ex-this.bx;const D=this.ey-this.by;const dot=A*C+B*D;const len_sq=C*C+D*D;let param=-1;if(len_sq!=0)param=dot/len_sq;let xx,yy;if(param<0){xx=this.bx;yy=this.by}else if(param>1){xx=this.ex;yy=this.ey}else{xx=this.bx+param*C;yy=this.by+param*D}const dx=x-xx;const dy=y-yy;return Math.sqrt(dx*dx+dy*dy)}get slope(){return Math.atan2(this.ey-this.by,this.ex-this.bx)}getPoint=position=>position=="tail"?[this.bx,this.by]:[this.ex,this.ey];setJson(json){super.setJson(json);this.bx=json.x1;this.by=json.y1;this.ex=json.x2;this.ey=json.y2;const style=json.style;this.strokeStyle=style.color;this.lineDash=style.dots;if(style.hasOwnProperty("head")){this.lineCapHead.setJson(style.head)}if(style.hasOwnProperty("tail")){this.lineCapTail.setJson(style.tail)}}getJson(){const json=super.getJson();json.x1=this.bx;json.y1=this.by;json.x2=this.ex;json.y2=this.ey;json.style={color:this.strokeStyle,dots:this.lineDash,with:this.lineWidth};delete json.style.stroke;if(this.lineCapHead){json.style.head=this.lineCapHead.getJson()}if(this.lineCapTail){json.style.tail=this.lineCapTail.getJson()}return json}static getDashVal(lineDash){switch(lineDash){case"solid":return[];case"dash":return[8];case"dot":return[2];case"dash-dot":return[8,4,2];case"dash-dot-dot":return[8,4,2,4,2];default:return[]}}}